#include <iostream>
#include <string>

struct Node {
    std::string name;
    int age;
    double salary;
    Node* next;
};

void addToBeginning(Node*& head, std::string name, int age, double salary) {
    Node* newNode = new Node;
    newNode->name = name;
    newNode->age = age;
    newNode->salary = salary;
    newNode->next = head;
    head = newNode;
}

void addToEnd(Node*& head, std::string name, int age, double salary) {
    Node* newNode = new Node;
    newNode->name = name;
    newNode->age = age;
    newNode->salary = salary;
    newNode->next = nullptr;

    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addAfter(Node* head, std::string targetName, std::string name, int age, double salary) {
    Node* temp = head;
    while (temp != nullptr && temp->name != targetName) {
        temp = temp->next;
    }
    if (temp != nullptr) {
        Node* newNode = new Node;
        newNode->name = name;
        newNode->age = age;
        newNode->salary = salary;
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

void addBefore(Node*& head, std::string targetName, std::string name, int age, double salary) {
    if (head == nullptr) return;

    if (head->name == targetName) {
        addToBeginning(head, name, age, salary);
        return;
    }

    Node* temp = head;
    while (temp->next != nullptr && temp->next->name != targetName) {
        temp = temp->next;
    }
    if (temp->next != nullptr) {
        Node* newNode = new Node;
        newNode->name = name;
        newNode->age = age;
        newNode->salary = salary;
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

void deleteNode(Node*& head, std::string targetName) {
    if (head == nullptr) return;

    if (head->name == targetName) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    Node* temp = head;
    while (temp->next != nullptr && temp->next->name != targetName) {
        temp = temp->next;
    }
    if (temp->next != nullptr) {
        Node* nodeToDelete = temp->next;
        temp->next = temp->next->next;
        delete nodeToDelete;
    }
}

void printList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        std::cout << "Name: " << temp->name << ", Age: " << temp->age << ", Salary: " << temp->salary << std::endl;
        temp = temp->next;
    }
}

int main() {
    Node* head = nullptr;

    addToEnd(head, "Alice", 30, 50000);
    addToBeginning(head, "Bob", 25, 45000);
    addAfter(head, "Bob", "Charlie", 28, 48000);
    addBefore(head, "Alice", "David", 35, 52000);

    std::cout << "Initial List:" << std::endl;
    printList(head);

    deleteNode(head, "Charlie");
    std::cout << "\nList after deleting Charlie:" << std::endl;
    printList(head);

    return 0;
}
